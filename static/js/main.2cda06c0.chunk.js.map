{"version":3,"sources":["Counter.tsx","StartInput.tsx","MaxInput.tsx","Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","props","counterStyle","counter","maxValue","startValue","className","warning","StartInput","startInputMistake","title","type","onChange","e","changeStartValue","currentTarget","value","autoFocus","MaxInput","maxInputMistake","changeMaxValue","Button","disabled","onClick","App","useState","setStartValue","setMaxValue","setCounter","setWarning","setDisabled","disabledInc","setDisabledInc","disabledReset","setDisabledReset","increment","reset","newValue","incorrectValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cda06c0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype CounterPropsType = {\r\n    counter: number;\r\n    increment: () => void\r\n    maxValue: number\r\n    startValue: number\r\n    reset: () => void\r\n    warning: string\r\n    incorrectValue: boolean\r\n}\r\n\r\nfunction Counter(props: CounterPropsType) {\r\n    const disableValue = props.counter === props.maxValue || props.startValue < 0 || props.startValue >= props.maxValue;\r\n    const counterStyle = (disableValue) ? \"incorrectCounterStyle\" : \"CounterStyle\";\r\n\r\n    return (\r\n        <div>\r\n            <div className={counterStyle}>{props.warning || props.counter} </div>\r\n            <div className=\"CounterButtons\">\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    changeStartValue: (newValue: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n    title: string\r\n}\r\n\r\nexport function StartInput(props: InputPropsType) {\r\n    const onStartInputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStartValue(+e.currentTarget.value);\r\n    }\r\n    let startInputMistake = props.startValue < 0 || props.maxValue <= props.startValue ? \"StartMistakeInput\" : \"Input\";\r\n    return (\r\n        <div className=\"input\">\r\n\r\n            {props.title} <input className={startInputMistake} type={\"number\"} onChange={onStartInputChangeHandler}\r\n                                 value={props.startValue}\r\n                                 autoFocus/>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\n\r\n\r\ntype InputProps = {\r\n    changeMaxValue: (newValue: number) => void\r\n    maxValue: number\r\n    startValue: number\r\n    title: string\r\n}\r\n\r\nexport function MaxInput(props: InputProps) {\r\n\r\n    const onMaxInputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMaxValue(+e.currentTarget.value);\r\n    }\r\n\r\n    let maxInputMistake = props.maxValue < 0 || props.maxValue <= props.startValue ? \"MaxMistakeInput\" : \"Input\";\r\n\r\n    return (\r\n        <div className=\"input\">\r\n\r\n            {props.title} <input className={maxInputMistake} type={\"number\"}\r\n                                 onChange={onMaxInputChangeHandler} value={props.maxValue}/>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\n\r\ntype ButtonProps = {\r\n    onClick: () => void\r\n    title: string\r\n    disabled: boolean\r\n}\r\n\r\nfunction Button(props: ButtonProps) {\r\n    return (\r\n        <div className={\"button\"}>\r\n            <button disabled={props.disabled} onClick={props.onClick}>{props.title}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, {useState} from 'react';\nimport './App.css';\nimport Counter from \"./Counter\";\nimport {StartInput} from \"./StartInput\";\nimport {MaxInput} from \"./MaxInput\";\nimport Button from \"./Button\";\n\nfunction App() {\n    const [startValue, setStartValue] = useState<number>(0);\n    const [maxValue, setMaxValue] = useState<number>(5);\n    let [counter, setCounter] = useState<number>(0);\n    const [warning, setWarning] = useState<string>(\"\");\n    const [disabled, setDisabled] = useState<boolean>(false);\n    const [disabledInc, setDisabledInc] = useState<boolean>(false);\n    const [disabledReset, setDisabledReset] = useState<boolean>(false);\n\n    const changeMaxValue = (newValue: number) => {\n\n        setMaxValue(newValue);\n        setDisabled(false)\n        setDisabledInc(true);\n        setDisabledReset(true);\n\n        let incorrectValue = startValue < 0 || startValue >= newValue;\n\n        if (incorrectValue) {\n            setWarning(\"Incorrect value!\");\n            setDisabled(!disabled)\n        } else {\n            setWarning(\"Enter values and press 'set'\");\n            setDisabledInc(true);\n            setDisabledReset(true);\n\n        }\n    }\n\n    const changeStartValue = (newValue: number) => {\n\n        setStartValue(newValue);\n        setDisabled(false);\n        setDisabledInc(false);\n        setDisabledReset(false);\n\n        let incorrectValue = newValue < 0 || newValue >= maxValue;\n\n        if (incorrectValue) {\n            setWarning(\"Incorrect value!\");\n            setDisabled(true)\n            setDisabledInc(true);\n            setDisabledReset(true);\n        } else {\n            setWarning(\"Enter values and press 'set'\");\n            setDisabledInc(true);\n            setDisabledReset(true);\n        }\n    }\n\n    const setValue = () => {\n        setCounter(startValue);\n        setWarning(\"\");\n        setDisabled(!disabled);\n        setDisabledInc(false);\n        setDisabledReset(false);\n    }\n\n    const increment = () => {\n        if (counter === maxValue || startValue < 0 || startValue >= maxValue) {\n            setDisabledInc(true);\n        } else setCounter(counter + 1)\n    }\n\n    const reset = () => {\n        setCounter(startValue)\n        setDisabledInc(false);\n    }\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"wrapper\">\n                <MaxInput changeMaxValue={changeMaxValue}\n                          maxValue={maxValue} startValue={startValue}\n                          title={\"Max Input:\"}/>\n\n                <StartInput changeStartValue={changeStartValue} title={\"Min Input:\"}\n                            startValue={startValue}\n                            maxValue={maxValue}/>\n\n                <Button disabled={disabled} onClick={setValue} title={\"Set\"}/>\n\n            </div>\n            <div className={\"wrapper\"}>\n                <Counter counter={counter} increment={increment} startValue={startValue} maxValue={maxValue}\n                         reset={reset} warning={warning} incorrectValue={!!warning}/>\n\n                <Button disabled={disabledInc}\n                        onClick={increment} title={\"inc\"}/>\n                <Button disabled={disabledReset} onClick={reset} title={\"reset\"}/>\n\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}