{"version":3,"sources":["Counter.tsx","StartInput.tsx","MaxInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","props","counterStyle","counter","maxValue","startValue","className","warning","StartInput","startInputMistake","title","TextField","label","type","variant","onChange","e","changeStartValue","currentTarget","value","autoFocus","MaxInput","maxInputMistake","changeMaxValue","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","alignItems","flexDirection","height","width","background","boxShadow","margin","spacing","App","useState","setStartValue","setMaxValue","setCounter","setWarning","disabled","setDisabled","disabledInc","setDisabledInc","disabledReset","setDisabledReset","classes","useEffect","startNumberAsString","localStorage","getItem","startNumber","JSON","parse","maxNumberAsString","maxNumber","setItem","stringify","increment","reset","Container","fixed","style","Box","Paper","elevation","newValue","Button","size","onClick","alignContent","incorrectValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c12ad93a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype CounterPropsType = {\r\n    counter: number;\r\n    increment: () => void\r\n    maxValue: number\r\n    startValue: number\r\n    reset: () => void\r\n    warning: string\r\n    incorrectValue: boolean\r\n}\r\n\r\nfunction Counter(props: CounterPropsType) {\r\n    const disableValue = props.counter === props.maxValue || props.startValue < 0 || props.startValue >= props.maxValue;\r\n    const counterStyle = (disableValue) ? \"incorrectCounterStyle\" : \"CounterStyle\";\r\n\r\n    return (\r\n        <div>\r\n            <div className={counterStyle}>{props.warning || props.counter} </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;","import React, {ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype InputPropsType = {\r\n    changeStartValue: (newValue: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n    title: string\r\n}\r\n\r\nexport function StartInput(props: InputPropsType) {\r\n    const onStartInputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStartValue(+e.currentTarget.value);\r\n    }\r\n    let startInputMistake = props.startValue < 0 || props.maxValue <= props.startValue ? \"StartMistakeInput\" : \"Input\";\r\n    return (\r\n        <div className=\"input\">\r\n\r\n            {props.title} <TextField className={startInputMistake} label=\"Number\" type={\"number\"} variant=\"filled\"\r\n                                     onChange={onStartInputChangeHandler}\r\n                                     value={props.startValue}\r\n                                     autoFocus/>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype InputProps = {\r\n    changeMaxValue: (newValue: number) => void\r\n    maxValue: number\r\n    startValue: number\r\n    title: string\r\n}\r\n\r\nexport function MaxInput(props: InputProps) {\r\n\r\n    const onMaxInputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMaxValue(+e.currentTarget.value);\r\n    }\r\n\r\n    let maxInputMistake = props.maxValue < 0 || props.maxValue <= props.startValue ? \"MaxMistakeInput\" : \"\";\r\n\r\n    return (\r\n        <div className=\"input\">\r\n\r\n            {props.title} <TextField className={maxInputMistake} label=\"Number\" variant=\"filled\" type={\"number\"}\r\n                                     onChange={onMaxInputChangeHandler} value={props.maxValue}/>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Counter from \"./Counter\";\nimport {StartInput} from \"./StartInput\";\nimport {MaxInput} from \"./MaxInput\";\nimport {Box, Container, makeStyles, Paper} from \"@material-ui/core\";\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        width: \"100%\",\n        background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n        boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nfunction App() {\n    const [startValue, setStartValue] = useState<number>(0);\n    const [maxValue, setMaxValue] = useState<number>(5);\n    let [counter, setCounter] = useState<number>(0);\n    const [warning, setWarning] = useState<string>(\"\");\n    const [disabled, setDisabled] = useState<boolean>(false);\n    const [disabledInc, setDisabledInc] = useState<boolean>(false);\n    const [disabledReset, setDisabledReset] = useState<boolean>(false);\n\n    const classes = useStyles();\n\n    useEffect(() => {\n\n        let startNumberAsString = localStorage.getItem('startValue')\n        if (startNumberAsString) {\n            let startNumber = JSON.parse(startNumberAsString)\n            setStartValue(startNumber)\n        }\n\n        let maxNumberAsString = localStorage.getItem('maxValue')\n        if (maxNumberAsString) {\n            let maxNumber = JSON.parse(maxNumberAsString)\n            setMaxValue(maxNumber)\n        }\n\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem(\"startValue\", JSON.stringify(startValue))\n        localStorage.setItem(\"maxValue\", JSON.stringify(maxValue))\n    }, [startValue, maxValue])\n\n\n    const changeMaxValue = (newValue: number) => {\n\n        setMaxValue(newValue);\n        setDisabled(false)\n        setDisabledInc(true);\n        setDisabledReset(true);\n\n        let incorrectValue = startValue < 0 || startValue >= newValue;\n\n        if (incorrectValue) {\n            setWarning(\"Incorrect value!\");\n            setDisabled(!disabled)\n        } else {\n            setWarning(\"Enter values and press 'set'\");\n            setDisabledInc(true);\n            setDisabledReset(true);\n\n        }\n    }\n\n    const changeStartValue = (newValue: number) => {\n\n        setStartValue(newValue);\n        setDisabled(false);\n        setDisabledInc(false);\n        setDisabledReset(false);\n\n        let incorrectValue = newValue < 0 || newValue >= maxValue;\n\n        if (incorrectValue) {\n            setWarning(\"Incorrect value!\");\n            setDisabled(true)\n            setDisabledInc(true);\n            setDisabledReset(true);\n        } else {\n            setWarning(\"Enter values and press 'set'\");\n            setDisabledInc(true);\n            setDisabledReset(true);\n        }\n    }\n\n    const setValue = () => {\n        setCounter(startValue);\n        setWarning(\"\");\n        setDisabled(!disabled);\n        setDisabledInc(false);\n        setDisabledReset(false);\n    }\n\n    const increment = () => {\n        if (counter === maxValue || startValue < 0 || startValue >= maxValue) {\n            setDisabledInc(true);\n        } else setCounter(counter + 1)\n    }\n\n    const reset = () => {\n        setCounter(startValue)\n        setDisabledInc(false);\n    }\n\n\n    return (\n        <Container fixed style={{height: \"100vh\"}}>\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{height: \"100vh\"}}>\n                <Box style={{height: \"50%\", width: \"40%\", margin: \"20px\"}}>\n                    <Paper elevation={4} className={classes.root}>\n                        <MaxInput changeMaxValue={changeMaxValue}\n                                  maxValue={maxValue} startValue={startValue}\n                                  title={\"Max Input:\"}/>\n\n                        <StartInput changeStartValue={changeStartValue} title={\"Min Input:\"}\n                                    startValue={startValue}\n                                    maxValue={maxValue}/>\n\n                        <Button variant={\"contained\"} size={\"small\"} disabled={disabled}\n                                onClick={setValue}> Set</Button>\n                    </Paper>\n                </Box>\n\n                <Box style={{height: \"50%\", width: \"40%\", margin: \"20px\"}} alignContent=\"center\">\n                    <Paper elevation={4} className={classes.root}>\n                        <Counter counter={counter} increment={increment} startValue={startValue} maxValue={maxValue}\n                                 reset={reset} warning={warning} incorrectValue={!!warning}/>\n\n                        <Button variant={\"contained\"} size={\"small\"} disabled={disabledInc}\n                                onClick={increment}> inc</Button>\n                        <Button variant={\"contained\"} size={\"small\"} disabled={disabledReset}\n                                onClick={reset}> reset</Button>\n\n                    </Paper>\n                </Box>\n            </Box>\n        </Container>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}